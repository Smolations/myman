## get path to this script
if [ "x${myman_path}" = "x" ]; then
    # determine the path to this script. it will become the gitscripts path. the cfg directory
    # must live in the same directory as this script for any user overrides to take effect.
    myman_path="${BASH_SOURCE[0]}"
    if [ -h "${myman_path}" ]; then
        while [ -h "${myman_path}" ]; do
            myman_path=`readlink "${myman_path}"`
        done
    fi
    pushd . > /dev/null
    cd `dirname ${myman_path}` > /dev/null
    export myman_path=`pwd`;
    popd  > /dev/null
fi

cwd=$(pwd)
cd "$myman_path"

export myman_awk_path="${myman_path}/awk"
export myman_lib_path="${myman_path}/lib"
export myman_docs_path=~/".myman"
export myman_tmp="${myman_docs_path}/tmp"

## create necessary directories if they dont exist
mm_paths=( "$myman_docs_path" "$myman_lib_path" )
for mm_path in ${mm_paths[@]}; do
    [ ! -d "$mm_path" ] && mkdir -p "$mm_path"
done


## make sure we have the correct submodule(s)
submodules=( "__cfg" "functionsh" )
for submodule in ${submodules[@]}; do
    if [ ! -d "${myman_lib_path}/${submodule}" ]; then
        echo "\`myman\` is initializing submodules..."
        git submodule init
        git submodule update
        break;
    fi
done


## bring in __cfg
if [ -f "${myman_lib_path}/__cfg/SOURCEME" ]; then
    source "${myman_lib_path}/__cfg/SOURCEME"
fi

# initialize initial cfg entries
if ! _cfg_exists; then
    __cfg init
    __cfg "index.myman.src" "${myman_path}/functions"
fi


## bring in functionsh
if [ -f "${myman_lib_path}/functionsh/SOURCEME" ]; then
    source "${myman_lib_path}/functionsh/SOURCEME"
fi

__source_all "${myman_path}/functions"


# build docs for myman if they dont exist
if [ ! -d "${myman_docs_path}/myman" ]; then
    myman_build myman
fi

cd "$cwd"
